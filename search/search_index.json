{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ScriptBee","text":"<p>ScriptBee is a tool that helps the analysis of different models. Different tools create data and with the help of loaders, ScriptBee can load the data and create a model. The model can then be analyzed by running different scripts written in C#, Javascript and Python on it.</p>"},{"location":"#installation","title":"Installation","text":"<p>Check the installation guide for more information.</p>"},{"location":"#how-to-run","title":"How to run","text":"<p>To run ScriptBee simply run the following command:</p> <pre><code>docker-compose up\n</code></pre> <p>For more information, check the run guide for more information.</p>"},{"location":"architecture/diagram/","title":"Architecture Diagram","text":"<p>Work in Progress</p> <p></p>"},{"location":"architecture/features/","title":"Features","text":"<p>Work in Progress</p>"},{"location":"architecture/features/#deployment","title":"Deployment","text":"<p>All below environment variables are subject to change</p>"},{"location":"architecture/features/#kubernetes","title":"Kubernetes","text":"<p>For the Kubernetes deployment, the following environment variables need to be set</p> <pre><code>FEATURES__DEPLOYMENT_CALCULATION=kubernetes\n</code></pre>"},{"location":"architecture/features/#docker-swarm","title":"Docker Swarm","text":"<p>For the Docker swarm deployment, the following environment variables need to be set</p> <pre><code>FEATURES__DEPLOYMENT_CALCULATION=docker\n</code></pre>"},{"location":"architecture/features/#authorization","title":"Authorization","text":"<p>Authorization can be disabled entirely</p> <p>Not recommended for production</p> <pre><code>FEATURES_DISABLEAUTHORIZATION=true\n</code></pre>"},{"location":"architecture/overview/","title":"Overview","text":"<p>Work in Progress</p>"},{"location":"architecture/overview/#ui","title":"UI","text":"<p>The UI uses plugins defined by the gateway.</p> <p>The plugins can be of several types</p>"},{"location":"architecture/overview/#output-type-plugin","title":"Output Type plugin","text":"<p>To offer different visualization of the data</p>"},{"location":"architecture/overview/#gateway","title":"Gateway","text":"<p>Is responsible for the interaction with UI, user authentication and authorization, project management, communicating with the calculation instances</p>"},{"location":"architecture/overview/#persistence","title":"Persistence","text":"<p>Data is stored in MongoDB</p>"},{"location":"architecture/overview/#calculation","title":"Calculation","text":"<p>Is responsible for loading data, linking the models and executing scripts to obtain different results</p> <p>Calculation can be done in 2 types of instances:</p> <ul> <li>Permanent</li> <li>Temporary</li> </ul> <p>A permanent instance is allocated and deallocated by the user on command. The purpose is to have a long-running instance with the linked model to run different types of analysis</p> <p>A temporary instance is used for one time processing of the models. The model is loaded and linked, a set of predefined scripts is run to perform the analysis. After the calculations are done, the instance is deallocated. It is used for CI/CD analysis</p>"},{"location":"architecture/overview/#persistence_1","title":"Persistence","text":"<p>Data is stored in MongoDB</p>"},{"location":"architecture/overview/#deployment","title":"Deployment","text":"<p>See Features for more information about the deployment</p>"},{"location":"architecture/overview/#kubernetes","title":"Kubernetes","text":"<p>The deployment in Kubernetes is done deploying the calculation engine via a CRD</p>"},{"location":"architecture/overview/#docker","title":"Docker","text":"<p>The deployment is done using Docker API</p>"},{"location":"architecture/rbac/","title":"RBAC","text":"<p>Work in Progress</p> <p>Roles:</p> <ul> <li>Guest - basic user with limited capabilities</li> <li>Analyst - user that can perform different analysis on allowed projects</li> <li>Maintainer - handles operations on the allowed projects</li> <li>Administrator - has full access for every functionality</li> </ul>"},{"location":"architecture/rbac/#project-management","title":"Project Management","text":"Permission Guest Analyst Maintainer Administrator view_project \u2713 \u2713 \u2713 \u2713 update_project \u2713 \u2713 delete_project \u2713 \u2713 create_project \u2713"},{"location":"architecture/rbac/#user-management","title":"User Management","text":"Permission Guest Analyst Maintainer Administrator update_project_user \u2713 \u2713 update_user_role \u2713"},{"location":"architecture/rbac/#model-management","title":"Model Management","text":"Permission Guest Analyst Maintainer Administrator install_loader \u2713 \u2713 \u2713 uninstall_loader \u2713 \u2713 \u2713 install_linker \u2713 \u2713 \u2713 uninstall_linker \u2713 \u2713 \u2713"},{"location":"architecture/rbac/#analysis","title":"Analysis","text":"Permission Guest Analyst Maintainer Administrator view_analysis \u2713 \u2713 \u2713 \u2713 run_analysis \u2713 \u2713 \u2713 remove_analysis \u2713 \u2713 \u2713 view_script \u2713 \u2713 \u2713 create_script \u2713 \u2713 \u2713 update_script \u2713 \u2713 \u2713 delete_script \u2713 \u2713 \u2713 create_analysis_token \u2713 \u2713 delete_analysis_token \u2713 \u2713"},{"location":"home/installation/","title":"Installation","text":""},{"location":"home/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Mongo 4.4</li> <li>Dotnet 6.0</li> <li>Node 16.0</li> </ul>"},{"location":"home/installation/#docker-compose","title":"Docker Compose","text":"<p>You start ScriptBee using Docker. In order to do so, you need to setup a MongoDB server and set the connection string as an environment variable.</p> <p>An example of the <code>docker-compose.yaml</code>:</p> docker-compose.yaml<pre><code>version: \"3.8\"\nservices:\n  mongo:\n    image: mongo:4.4\n    container_name: mongo\n    restart: unless-stopped\n    volumes:\n      - ./database:/data/db\n\n  scripbee:\n    image: dxworks/scriptbee\n    ports:\n      - \"4201:80\"\n    volumes:\n      - /host/scriptbee_data:/root/.scriptbee\n\n    environment:\n      - UserFolder__UserFolderPath=/host/scriptbee_data\n      - ConnectionStrings__mongodb=mongodb://mongo:27017/ScriptBee?authSource=admin\n    depends_on:\n      - mongo\n</code></pre>"},{"location":"home/installation/#mongodb","title":"MongoDB","text":"<p>ScriptBee uses MongoDB as a database. In order to run ScriptBee, you need to setup a MongoDB server and set the connection string as an environment variable.</p> <p>For example:</p> <pre><code>environment:\n  - ConnectionStrings__mongodb=mongodb://mongo:27017/ScriptBee?authSource=admin\n</code></pre>"},{"location":"home/installation/#scriptbee-data","title":"ScriptBee Data","text":"<p>ScriptBee stores the data in the user folder, in this case <code>/root/.scriptbee</code>. In order to access the data from the host machine, you need to mount a volume to the container.</p> <p>For example:</p> <pre><code>volumes:\n  - ./scriptbee_data:/root/.scriptbee\n</code></pre> <p>This is the path to the folder where the ScriptBee data will be stored. This includes the scripts and plugins. You can see in the following example how the folder structure looks like</p> <pre><code>./scriptbee_data\n\n\u2514\u2500\u2500 plugins\n    \u251c\u2500\u2500 plugin1\n    \u2514\u2500\u2500 plugin2\n\u2514\u2500\u2500 projects\n    \u2514\u2500\u2500 project1\n      \u251c\u2500\u2500 generated\n      \u2514\u2500\u2500 src\n        \u2514\u2500\u2500 script.cs\n</code></pre>"},{"location":"home/installation/#user-folder-setup","title":"User Folder Setup","text":"<p>In order to open the scripts in Visual Studio Code, you need to set an environment variable to the user folder in the following environment variable: <code>UserFolder__UserFolderPath</code>.</p> <p>This should be the absolute path of the host machine to the folder where the ScriptBee data is stored.</p> <pre><code>scripbee:\n  image: dxworks/scriptbee\n\n  volumes:\n    - ./scriptbee_data:/root/.scriptbee\n\n  environment:\n    - UserFolder__UserFolderPath=/root/scriptbee_data\n</code></pre>"},{"location":"home/run/","title":"How to run","text":"<p>To run ScriptBee simply run the following command:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"plugins/bundle/","title":"Plugin Bundle","text":"<p>A bundle is a collection of plugins that are used together. It can contain also standalone extension points.</p> <p>When a bundle is installed, the contained plugins are installed as well.</p>"},{"location":"plugins/bundle/#manifest","title":"Manifest","text":"<p>An example can be seen below:</p> manifest.yaml<pre><code>apiVersion: 1.0.0\nauthor: ScriptBee\ndescription: \"Bundle Plugin\"\nname: Bundle Plugin\nextensionPoints:\n  - kind: HelperFunctions\n    entryPoint: HelperFunctions.dll\n    version: 1.0.0\n  - kind: Plugin\n    entryPoint: plugin-id-1\n    version: 1.0.1\n  - kind: Plugin\n    entryPoint: plugin-id-2\n    version: 5.0.1  \n</code></pre> <ul> <li><code>apiVersion</code>: The version of the plugin manifest api</li> <li><code>author</code>: The author of the plugin</li> <li><code>description</code>: A description of the plugin</li> <li><code>name</code>: The name of the plugin</li> <li><code>extensionPoints</code>: A list of extension points that the plugin provides</li> <li><code>kind</code>: The type of plugin</li> <li><code>entryPoint</code>: If the extension point is a plugin, the entry point is the relative path to the DLL containing the   implemented interfaces for the respective plugins. If the extension point is a bundle, the entryPoint is the id of   the plugin</li> <li><code>version</code>: The version of the plugin</li> </ul>"},{"location":"plugins/bundle/#example","title":"Example","text":"<p>An example of a bundle can be found at Software Assesment ScriptBee Plugin</p>"},{"location":"plugins/helper_functions/","title":"Helper Functions Plugin","text":"<p>Helper Functions are a way to extend the functionality of ScriptBee. They can be used to add custom functions that can be used in the scripts directly.</p>"},{"location":"plugins/helper_functions/#manifest","title":"Manifest","text":"<p>An example can be seen below:</p> manifest.yaml<pre><code>extensionPoints:\n  - kind: HelperFunctions\n    entryPoint: HelperFunction.dll\n    version: 1.0.0\n</code></pre> <ul> <li><code>kind</code>: The type of plugin</li> <li><code>entryPoint</code>: The relative path to the DLL containing the implemented interfaces for the respective plugins.</li> <li><code>version</code>: The version of the plugin</li> </ul>"},{"location":"plugins/helper_functions/#helper-function-interface","title":"Helper Function Interface","text":"IHelperFunction.cs<pre><code>public interface IHelperFunctions : IPlugin\n{\n    Task OnLoadAsync(CancellationToken cancellationToken = default)\n    {\n        return Task.CompletedTask;\n    }\n\n    Task OnUnloadAsync(CancellationToken cancellationToken = default)\n    {\n        return Task.CompletedTask;\n    }\n}\n</code></pre> <ul> <li><code>OnLoadAsync</code>: Called before the script is run</li> <li><code>OnUnloadAsync</code>: Called after the script is run</li> </ul>"},{"location":"plugins/helper_functions/#example","title":"Example","text":"<p>ScriptBee has helper functions that deal with console output, csv files, json files and text files.</p> <p>ScriptBee's default helper functions can be found here</p>"},{"location":"plugins/installation/","title":"Plugin Installation","text":"<p>ScriptBee supports different types of plugins, as well as plugin bundles which are a collection of plugins. They are installed in the plugins folder of the ScriptBee data folder. For more information about the ScriptBee data folder, see Installation section.</p> <p>In order for a plugin to be considered valid, the folder must contain a <code>manifest.yaml</code> file.</p> <p>Note: when a new version of a plugin is installed, the old version will be removed.</p>"},{"location":"plugins/installation/#automatic-installation","title":"Automatic Installation","text":"<p>Plugins and Bundles can be installed automatically using the UI from the <code>plugins</code> section.</p> <p>The plugin information are fetched from the DxWorks Hub. ScriptBee uses the DxWorks Hub SDK to communicate with the Hub. It will create a folder called <code>.dxw</code> in the users folder were the hub will be downloaded and used. ( e.g. <code>C:\\Users\\{user}\\.dxw\\hub</code>)</p> <p>The Sdk will clone the DxWorks Hub repository and will use the <code>hub</code> folder to get the information about the plugins like the name, version and others.</p>"},{"location":"plugins/installation/#manual-installation","title":"Manual Installation","text":"<p>Plugins and Bundles can be installed manually by copying the plugin folders into the <code>plugins</code> folder of the ScriptBee data folder.</p> <p>The folder of the plugin must be named with the following format: <code>{PluginName}@{PluginVersion}</code> and must contain a <code>manifest.yaml</code> file.</p>"},{"location":"plugins/installation/#uninstalling-plugins","title":"Uninstalling Plugins","text":"<p>Plugins can be uninstalled from the <code>plugins</code> section of the UI. When a plugin is uninstalled, the web server will needs to be restarted in order to take effect.</p>"},{"location":"plugins/linker/","title":"Linker Plugin","text":"<p>A linker plugin is responsible for connecting the models loaded by the loader plugins by adding links in ScriptBee's Context.</p>"},{"location":"plugins/linker/#manifest","title":"Manifest","text":"<p>An example can be seen below:</p> manifest.yaml<pre><code>extensionPoints:\n  - kind: Linker\n    entryPoint: Linker.dll\n    version: 1.0.0\n</code></pre> <ul> <li><code>kind</code>: The type of plugin</li> <li><code>entryPoint</code>: The relative path to the DLL containing the implemented interfaces for the respective plugins.</li> <li><code>version</code>: The version of the plugin</li> </ul>"},{"location":"plugins/linker/#linker-interface","title":"Linker Interface","text":"<p>Each linker must implement the <code>IModelLinker</code> interface.</p> <p>It receives the entire context to modify it and add links between the models.</p> <pre><code>public interface IModelLinker : IPlugin\n{\n    public Task LinkModel(Dictionary&lt;Tuple&lt;string, string&gt;, Dictionary&lt;string, ScriptBeeModel&gt;&gt; context,\n        Dictionary&lt;string, object&gt;? configuration = default, CancellationToken cancellationToken = default);\n\n    public string GetName();\n}\n</code></pre> <ul> <li><code>LinkModel</code>: Receives the entire context to modify it and add links between the models.</li> <li><code>GetName</code>: Returns the name of the plugin</li> </ul>"},{"location":"plugins/linker/#example","title":"Example","text":"<p>An example of a linker plugin can be found here</p>"},{"location":"plugins/loader/","title":"Loader Plugin","text":"<p>A loader plugin is responsible for loading raw, serialized data files into a model that will be added in ScriptBee's Context.</p>"},{"location":"plugins/loader/#manifest","title":"Manifest","text":"<p>An example can be seen below:</p> manifest.yaml<pre><code>extensionPoints:\n  - kind: Loader\n    entryPoint: Loader.dll\n    version: 1.0.1\n</code></pre> <ul> <li><code>kind</code>: The type of plugin</li> <li><code>entryPoint</code>: The relative path to the DLL containing the implemented interfaces for the respective plugins.</li> <li><code>version</code>: The version of the plugin</li> </ul>"},{"location":"plugins/loader/#loader-interface","title":"Loader Interface","text":"<p>Each loader plugin must implement the <code>IModelLoader</code> interface.</p> <p>It receives a list of streams containing the raw data files and returns a dictionary of models.</p> <pre><code>public interface IModelLoader : IPlugin\n{\n    public Task&lt;Dictionary&lt;string, Dictionary&lt;string, ScriptBeeModel&gt;&gt;&gt; LoadModel(List&lt;Stream&gt; fileStreams,\n        Dictionary&lt;string, object&gt;? configuration = default, CancellationToken cancellationToken = default);\n\n    public string GetName();\n}\n</code></pre> <ul> <li><code>LoadModel</code>: Receives a list of streams containing the raw data files and returns a dictionary of models.</li> <li><code>GetName</code>: Returns the name of the plugin</li> </ul> <p>The <code>LoadModel</code> method returns a dictionary of models. The key of the dictionary is the name of the exported entity and the value is a dictionary that contains the models. The key of the inner dictionary (entities dictionary) is a unique value specific to the loader plugin and the value is the model.</p>"},{"location":"plugins/loader/#example","title":"Example","text":"<p>An example of a loader plugin can be found at Jira Miner ScriptBee Plugin or at Honeydew ScriptBee Plugin</p>"},{"location":"plugins/manifest/","title":"Plugin Manifest","text":"<p>Each plugin folder must have a <code>manifest.yaml</code> file that describes the plugin. If the file is missing, the plugin will not be loaded.</p> <p>ScriptBee supports the following plugin types:</p> <ul> <li>Loader</li> <li>Linker</li> <li>Script Generator</li> <li>Script Runner</li> <li>Helper Functions</li> <li>Bundle Plugins</li> </ul> <p>Some examples of a plugin manifests can be found here.</p>"},{"location":"plugins/manifest/#anatomy-of-a-manifest","title":"Anatomy of a Manifest","text":"<p>The manifest file describes how the plugin is structured and what it does. It can contain multiple extension points</p> manifest.yaml<pre><code>apiVersion: 1.0.0\nauthor: ScriptBee\ndescription: \"Description\"\nname: \"HelperFunctions example\"\nextensionPoints:\n  - kind: HelperFunctions\n    entryPoint: Plugin.dll\n    version: \"0.0.1\"\n</code></pre> <ul> <li><code>apiVersion</code>: The version of the plugin manifest api</li> <li><code>author</code>: The author of the plugin</li> <li><code>description</code>: A description of the plugin</li> <li><code>name</code>: The name of the plugin</li> <li><code>extensionPoints</code>: A list of extension points that the plugin provides</li> <li><code>kind</code>: The type of plugin</li> <li><code>entryPoint</code>: If the extension point is a plugin, the entry point is the relative path to the DLL containing the   implemented interfaces for the respective plugins. If the extension point is a bundle, the entryPoint is the id of   the plugin</li> <li><code>version</code>: The version of the plugin</li> </ul> <p>Note: depending on the plugin type, each extension point can have different properties</p>"},{"location":"plugins/plugin_api/","title":"ScriptBee's Plugin API","text":""},{"location":"plugins/plugin_api/#dxworksscriptbeepluginapi","title":"DxWorks.ScriptBee.Plugin.Api","text":"<p>ScriptBee's plugin API is a way to extend the functionality of ScriptBee. Plugins can be used to add custom functionality to ScriptBee.</p> <p>Currently, ScriptBee supports the following plugins:</p> <ul> <li>Loader Plugins</li> <li>Linker Plugins</li> <li>Helper Functions Plugins</li> <li>Script Generator Plugins</li> <li>Script Runner Plugins</li> <li>Bundle Plugins</li> </ul> <p>Every plugin must have a <code>manifest.yaml</code> file in its root directory. More information about the manifest can be found in the manifest section.</p>"},{"location":"plugins/plugin_api/#services","title":"Services","text":"<p>Besides the plugin interfaces, ScriptBee also offers a set of services that can be used by plugins via dependency injection.</p>"},{"location":"plugins/plugin_api/#ihelperfunctionscontainer","title":"IHelperFunctionsContainer","text":"<p>The <code>IHelperFunctionsContainer</code> service is used to register helper functions. Helper functions are a way to extend the functionality of ScriptBee. They can be used to add custom functions that can be used in the scripts directly.</p> <p><code>IHelperFunctionsContainer</code> wraps the helper functions and provides a way to access them.</p> IHelperFunctionsContainer.cs<pre><code>public interface IHelperFunctionsContainer\n{\n    public Dictionary&lt;string, Delegate&gt; GetFunctionsDictionary();\n\n    public IEnumerable&lt;IHelperFunctions&gt; GetFunctions();\n}\n</code></pre> <p>ScriptRunner uses the <code>IHelperFunctionsContainer</code> service to get the helper functions and add them to the script engine.</p>"},{"location":"plugins/plugin_api/#ihelperfunctionsresultservice","title":"IHelperFunctionsResultService","text":"<p>The <code>IHelperFunctionsResultService</code> service is used to store the results of the helper functions and have a uniform way to deal with script outputs.</p> IHelperFunctionsResultService.cs<pre><code>public interface IHelperFunctionsResultService\n{\n    Task UploadResultAsync(string fileName, string type, string content, CancellationToken cancellationToken = default);\n\n    Task UploadResultAsync(string fileName, string type, Stream content, CancellationToken cancellationToken = default);\n\n    void UploadResult(string fileName, string type, string content);\n\n    void UploadResult(string fileName, string type, Stream content);\n}\n</code></pre> <p>ScriptBee's default helper functions use the <code>IHelperFunctionsResultService</code> service to upload the results of the helper functions.</p>"},{"location":"plugins/plugin_api/#run-result-types","title":"Run Result Types","text":"<p>ScriptBee has a set of predefined result types that can be used by the helper functions to upload the results.</p> RunResultDefaultTypes.cs<pre><code>public static class RunResultDefaultTypes\n{\n    public const string ConsoleType = \"Console\";\n    public const string FileType = \"File\";\n    public const string RunError = \"RunError\";\n}\n</code></pre>"},{"location":"plugins/script_generator/","title":"Script Generator Plugin","text":"<p>ScriptBee has a default Bundle that contains script generators for C#, Python and JavaScript.</p>"},{"location":"plugins/script_generator/#manifest","title":"Manifest","text":"<p>An example can be seen below:</p> manifest.yaml<pre><code>extensionPoints:\n  - kind: ScriptGenerator\n    entryPoint: Generator.dll\n    version: 1.0.1\n    language: csharp\n    extension: \".cs\"\n</code></pre> <ul> <li><code>kind</code>: The type of plugin</li> <li><code>entryPoint</code>: The relative path to the DLL containing the implemented interfaces for the respective plugins.</li> <li><code>version</code>: The version of the plugin</li> <li><code>language</code>: The programming language of the script generator</li> <li><code>extension</code>: The extension of the script</li> </ul>"},{"location":"plugins/script_generator/#script-generator-interface","title":"Script Generator Interface","text":"IScriptGenerator.cs<pre><code>public interface IScriptGeneratorStrategy : IPlugin\n{\n    public string Language { get; }\n\n    public string Extension { get; }\n\n    public string ExtractValidScript(string script);\n\n    public string GenerateClassName(Type classType);\n\n    public string GenerateClassName(Type classType, Type baseClassType, out HashSet&lt;Type&gt; baseClassGenericTypes);\n\n    public string GenerateClassStart();\n\n    public string GenerateClassEnd();\n\n    public string GenerateField(string fieldModifier, Type fieldType, string fieldName,\n        out HashSet&lt;Type&gt; genericTypes);\n\n    public string GenerateProperty(string propertyModifier, Type propertyType, string propertyName,\n        out HashSet&lt;Type&gt; genericTypes);\n\n    public string GenerateMethod(string methodModifier, Type methodType, string methodName,\n        List&lt;Tuple&lt;Type, string&gt;&gt; methodParams, out HashSet&lt;Type&gt; genericTypes);\n\n    public string GenerateModelDeclaration(string modelType);\n\n    public Task&lt;string&gt; GenerateSampleCode();\n\n    public string GenerateEmptyClass();\n\n    public Task&lt;string&gt; GenerateImports();\n\n    public string GetStartComment();\n\n    public string GetEndComment();\n}\n</code></pre>"},{"location":"plugins/script_generator/#example","title":"Example","text":"<p>ScriptBee's default C# script generator can be found here</p> <p>ScriptBee's default Python script generator can be found here</p> <p>ScriptBee's default JavaScript script generator can be found here</p>"},{"location":"plugins/script_runner/","title":"Script Runner Plugin","text":"<p>ScriptBee has a default Bundle that contains script runners for C#, Python and JavaScript.</p>"},{"location":"plugins/script_runner/#manifest","title":"Manifest","text":"<p>An example can be seen below:</p> manifest.yaml<pre><code>extensionPoints:\n  - kind: ScriptRunner\n    entryPoint: Runner.dll\n    version: 1.0.0\n    language: csharp\n</code></pre> <ul> <li><code>kind</code>: The type of plugin</li> <li><code>entryPoint</code>: The relative path to the DLL containing the implemented interfaces for the respective plugins.</li> <li><code>version</code>: The version of the plugin</li> <li><code>language</code>: The programming language of the script runner</li> </ul>"},{"location":"plugins/script_runner/#script-runner-interface","title":"Script Runner Interface","text":"IScriptRunner.cs<pre><code>public interface IScriptRunner : IPlugin\n{\n    public string Language { get; }\n\n    public Task RunAsync(IProject project, IHelperFunctionsContainer helperFunctionsContainer, string scriptContent,\n        CancellationToken cancellationToken = default);\n}\n</code></pre>"},{"location":"plugins/script_runner/#example","title":"Example","text":"<p>ScriptBee's default C# script runner can be found here</p> <p>ScriptBee's default Python script runner can be found here</p> <p>ScriptBee's default JavaScript script runner can be found here</p>"},{"location":"plugins/helper_functions/console_helper_functions/","title":"Console Helper Functions","text":""},{"location":"plugins/helper_functions/console_helper_functions/#console-write","title":"Console Write","text":"<pre><code>public void ConsoleWrite(object message);\n</code></pre> <pre><code>public void ConsoleWrite(string message);\n</code></pre> <pre><code>public void ConsoleWrite(int message);\n</code></pre> <pre><code>public void ConsoleWrite(double message);\n</code></pre> <pre><code>public void ConsoleWrite(float message);\n</code></pre> <pre><code>public void ConsoleWrite(bool message);\n</code></pre> <pre><code>public void ConsoleWrite(long message);\n</code></pre> <pre><code>public void ConsoleWrite(decimal message);\n</code></pre> <pre><code>public void ConsoleWrite(DateTime message);\n</code></pre> <pre><code>public void ConsoleWrite(char message);\n</code></pre> <pre><code>public void ConsoleWrite(short message);\n</code></pre> <pre><code>public void ConsoleWrite(uint message);\n</code></pre> <pre><code>public void ConsoleWrite(ulong message);\n</code></pre> <pre><code>public void ConsoleWrite(ushort message);\n</code></pre>"},{"location":"plugins/helper_functions/console_helper_functions/#console-write-line","title":"Console Write Line","text":"<pre><code>public void ConsoleWriteLine();\n</code></pre> <pre><code>public void ConsoleWriteLine(object message);\n</code></pre> <pre><code>public void ConsoleWriteLine(string message);\n</code></pre> <pre><code>public void ConsoleWriteLine(int message);\n</code></pre> <pre><code>public void ConsoleWriteLine(double message);\n</code></pre> <pre><code>public void ConsoleWriteLine(float message);\n</code></pre> <pre><code>public void ConsoleWriteLine(bool message);\n</code></pre> <pre><code>public void ConsoleWriteLine(long message);\n</code></pre> <pre><code>public void ConsoleWriteLine(decimal message);\n</code></pre> <pre><code>public void ConsoleWriteLine(DateTime message);\n</code></pre> <pre><code>public void ConsoleWriteLine(char message);\n</code></pre> <pre><code>public void ConsoleWriteLine(short message);\n</code></pre> <pre><code>public void ConsoleWriteLine(uint message);\n</code></pre> <pre><code>public void ConsoleWriteLine(ulong message);\n</code></pre> <pre><code>public void ConsoleWriteLine(ushort message);\n</code></pre>"},{"location":"plugins/helper_functions/context_helper_functions/","title":"Context Helper Functions","text":"<p>These functions are used to simply the process of handling the context from the non-C# scripts, like Python and JavaScript</p> <pre><code>object ContextGetValue(IContext context, string entityName, string loaderName)\n</code></pre>"},{"location":"plugins/helper_functions/csv_helper_functions/","title":"Csv Helper Functions","text":"<p>Csv Helper Functions use <code>CsvHelper</code> to convert objects to csv and export them to a file.</p> <pre><code> public async Task ExportCsvAsync&lt;T&gt;(string fileName, IEnumerable&lt;T&gt; records, CancellationToken cancellationToken = default);\n</code></pre> <pre><code>public void ExportCsv(string fileName, List&lt;object&gt; records);\n</code></pre>"},{"location":"plugins/helper_functions/file_helper_functions/","title":"File Helper Functions","text":"<pre><code>public void FileWrite(string fileName, string fileContent);\n</code></pre> <pre><code>public async Task FileWriteAsync(string fileName, string fileContent, CancellationToken cancellationToken = default)\n</code></pre> <pre><code>public async Task FileWriteStreamAsync(string fileName, Stream stream,CancellationToken cancellationToken = default)\n</code></pre> <pre><code>public void FileWriteStream(string fileName, Stream stream)\n</code></pre>"},{"location":"plugins/helper_functions/json_helper_functions/","title":"Json Helper Functions","text":"<p>Json Helper Functions use <code>Newtonsoft.Json</code> to convert objects to json and export them to a file.</p> <pre><code>public async Task ExportJsonAsync&lt;T&gt;(string fileName, T obj, JsonSerializerSettings? settings = default,CancellationToken cancellationToken = default)\n</code></pre> <pre><code>public void ExportJson(string fileName, object obj)\n</code></pre> <pre><code>public string ConvertJson(object obj);\n</code></pre>"},{"location":"projects/context/","title":"Project Context","text":"<p>The context is used to store the model loaded by the loader plugins and where the scripts are executed on. When a new project is created, an empty context is initialized.</p> <p>The linker plugins are run on the context to create different connections between the entities.</p>"},{"location":"projects/context/#models","title":"Models","text":"<p>The models are stored in a dictionary with the following structure:</p> <pre><code>public Dictionary&lt;Tuple&lt;string, string&gt;, Dictionary&lt;string, ScriptBeeModel&gt;&gt; Models { get; set; }\n</code></pre> <p>The idea is that each loader plugin will parse the input files in order to convert them into a model that will be stored in the context along with other models.</p> <p>The key of the dictionary is a tuple of string identifiers. The first string is the name of the exported type from the loader, and the second string is the name of the plugin.</p> <p>The value of the first dictionary is a another dictionary that contains the exported entities. The key of the second dictionary (entities dictionary) is a unique identifier set by the plugin, the actual value is not necessary relevant to ScriptBee.</p>"},{"location":"projects/context/#scriptbee-model-entity","title":"ScriptBee Model Entity","text":"<p>The ScriptBeeModel is a base entity that every entity model from the plugins must inherit from. It extends the <code>ExpandoObject</code> class from Westwind Utilities, so it can be used as a dynamic object. This allows to get and set properties dynamically in the scripts, without having to define them in advance.</p> <pre><code>public class ScriptBeeModel : Expando\n{\n    public bool Ignored { get; set; }\n}\n</code></pre>"},{"location":"projects/context/#context-interface","title":"Context Interface","text":"<p>This is the interface of the context.</p> <pre><code>public interface IContext\n{\n    public Dictionary&lt;Tuple&lt;string, string&gt;, Dictionary&lt;string, ScriptBeeModel&gt;&gt; Models { get; set; }\n\n    public Dictionary&lt;Tuple&lt;string, string&gt;, Dictionary&lt;string, string&gt;&gt; Tags { get; set; }\n\n    public void SetModel(Tuple&lt;string, string&gt; tuple, Dictionary&lt;string, ScriptBeeModel&gt; objectsDictionary);\n\n    public void RemoveLoaderEntries(string sourceName);\n\n    public List&lt;object&gt; GetClasses();\n\n    public void Clear();\n}\n</code></pre>"},{"location":"projects/context/#reload-context","title":"Reload Context","text":"<p>When restarting the web server, the context needs to be reloaded before running any scripts. This can be done using the \"Reload Context\" button from the project details page.</p>"},{"location":"projects/creation/","title":"Project Creation","text":"<p>Use the \"Create Project\" Button to create a new project.</p> <p>The project id is the slugified name of the project.</p> <p>When a new project is created, a new folder with the project id is created in the <code>projects</code> folder. In the project folder, two folders are generated <code>generated</code> and <code>src</code>. The <code>generated</code> folder is used to store the generated files from the scripts. The <code>src</code> folder is used to store the scripts.</p>"},{"location":"projects/creation/#project-context","title":"Project Context","text":"<p>When a new project is created, an empty context is initialized. The context is used to store the model loaded by the plugins and where the scripts are executed on.</p> <p>For more information about the context, check the context section.</p>"},{"location":"projects/creation/#project-interface","title":"Project Interface","text":"<pre><code>public interface IProject\n{\n    public IContext Context { get; set; }\n    public string Id { get; set; }\n    public string Name { get; set; }\n    public DateTime CreationDate { get; set; }\n}\n</code></pre>"},{"location":"projects/deletion/","title":"Project Deletion","text":"<p>Use the \"Delete Project\" Button to delete a project.</p> <p>Deleting a folder will remove the folder from the <code>projects</code> folder, as well as data stored in the MongoDB database.</p>"},{"location":"results/view/","title":"View Results","text":"<p>ScriptBee displays the results of the execution of a script in the <code>Build Errors</code> section, and also the <code>console</code> output and generated <code>files</code> in their dedicated sections.</p> <p>Each result is stored in MongoDB using GridFS</p>"},{"location":"scripts/first_csharp_script/","title":"Writing Your First C# Script","text":""},{"location":"scripts/first_csharp_script/#prerequisites","title":"Prerequisites","text":"<p>In order to write C# scripts, you need to have a C# Script Runner plugin installed. The examples uses ScriptBee Default Plugin Bundle</p>"},{"location":"scripts/first_csharp_script/#template","title":"Template","text":"script.cs<pre><code>using System;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing ScriptBee.ProjectContext;\nusing DxWorks.ScriptBee.Plugin.Api;\nusing DxWorks.ScriptBee.Plugin.Api.Model;\nusing static DxWorks.ScriptBee.Plugin.Api.HelperFunctions;\n\n\n// Only the code written in the ExecuteScript method will be executed\n\npublic class ScriptContent\n{\n    public void ExecuteScript(Project project)\n    {\n        ConsoleWriteLine(\"Hello, C#!\");\n    }\n}\n</code></pre>"},{"location":"scripts/first_csharp_script/#with-parameters","title":"With Parameters","text":"<p>ScriptBee supports parameterized scripts. This means that you can create add parameters while creating a script or edit them later.</p> <p>Make sure the script has the parameters defined before running it.</p> script.cs<pre><code>using System;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing ScriptBee.ProjectContext;\nusing DxWorks.ScriptBee.Plugin.Api;\nusing DxWorks.ScriptBee.Plugin.Api.Model;\nusing static DxWorks.ScriptBee.Plugin.Api.HelperFunctions;\n\n\n// Only the code written in the ExecuteScript method will be executed\n\npublic class ScriptContent\n{\n    public void ExecuteScript(Project project, ScriptParameters scriptParameters)\n    {\n        ConsoleWriteLine(\"Hello, C#!\");\n        ConsoleWriteLine(\"Parameter: \" + scriptParameters.MyParameter); \n    }\n}\n</code></pre>"},{"location":"scripts/first_csharp_script/#model-uploading","title":"Model Uploading","text":"<p>From project details section, upload a model files for the specific loader. In this example, we will use Honeydew Loader.</p> <p>After the model file is uploaded, load your model by clicking the <code>Load Files</code> button.</p>"},{"location":"scripts/first_csharp_script/#script-execution","title":"Script Execution","text":"script.cs<pre><code>using System;\nusing System.Text;\nusing System.Linq;\nusing System.Collections.Generic;\nusing ScriptBee.ProjectContext;\nusing DxWorks.ScriptBee.Plugin.Api;\nusing DxWorks.ScriptBee.Plugin.Api.Model;\nusing static DxWorks.ScriptBee.Plugin.Api.HelperFunctions;\n\n\n// Only the code written in the ExecuteScript method will be executed\n\npublic class ScriptContent\n{\n    public void ExecuteScript(Project project)\n    {\n        Dictionary&lt;Tuple&lt;string, string&gt;, Dictionary&lt;string, ScriptBeeModel&gt;&gt; models = project.Context.Models;\n\n        Dictionary&lt;string, ScriptBeeModel&gt; repos = models[Tuple.Create(\"Repository\", \"honeydew\")];\n\n        ConsoleWriteLine(\"Repos: \" + repos.Count);\n\n\n        var projects = repos.Values\n            .Select(repo =&gt; (repo as DxWorks.ScriptBee.Plugins.Honeydew.Models.RepositoryModel))\n            .SelectMany(repo =&gt; repo.Projects)\n            .Select(project =&gt; new\n            {\n                FilePath = project.FilePath,\n                Name = project.Name,\n                FileCount = project.Files.Count\n            });\n\n        ConsoleWriteLine(ConvertJson(projects));\n        ConsoleWriteLine(\"It contained \" + projects.Count() + \" projects.\");\n        ExportJson(\"output.json\", projects);\n    }\n}\n</code></pre> <p>The script above will print the number of repositories and projects in the model. It will also export the projects to a json file. It uses the classes offered by the Honeydew plugin that are stored in the context. Using the helper functions from <code>DxWorks.ScriptBee.Plugin.Api.HelperFunctions</code>, we can easily convert the projects to json and export them to a file.</p> <p>If everything is ok, you should see the results in the console and the file outputs section.  </p>"},{"location":"scripts/first_javascript_script/","title":"Writing Your First Javascript Script","text":""},{"location":"scripts/first_javascript_script/#prerequisites","title":"Prerequisites","text":"<p>In order to write Javascript scripts, you need to have a Javascript Script Runner plugin installed. The examples uses ScriptBee Default Plugin Bundle</p>"},{"location":"scripts/first_javascript_script/#template","title":"Template","text":"<p>Only the code written between <code>// start script</code> and <code>// end script</code> will be executed</p> script.js<pre><code>let project = new Project();\n\n// start script\n\nConsoleWriteLine(\"Hello, JavaScript!\");\n\n// end script\n</code></pre>"},{"location":"scripts/first_javascript_script/#with-parameters","title":"With Parameters","text":"<p>ScriptBee supports parameterized scripts. This means that you can create add parameters while creating a script or edit them later.</p> <p>Make sure the script has the parameters defined before running it.</p> script.js<pre><code>let project = new Project();\nlet scriptParameters = new ScriptParameters();\n\n// start script\n\nConsoleWriteLine(\"Hello, JavaScript!\");\nConsoleWriteLine(\"Parameter: \" + scriptParameters.MyParameter);\n\n// end script\n</code></pre>"},{"location":"scripts/first_javascript_script/#model-uploading","title":"Model Uploading","text":"<p>From project details section, upload a model files for the specific loader. In this example, we will use Honeydew Loader.</p> <p>After the model file is uploaded, load your model by clicking the <code>Load Files</code> button.</p>"},{"location":"scripts/first_javascript_script/#script-execution","title":"Script Execution","text":"script.cs<pre><code>let project = new Project();\n\n// start script\n\nvar repos = ContextGetValue(project.Context, \"Repository\", \"honeydew\");\n\nConsoleWriteLine(\"Repos: \" + repos.Count);\n\nvar projects = [];\n\nvar keys = Object.keys(repos)\n\nfor (var i = 0; i &lt; keys.length; i++) {\n    var key = keys[i];\n    var repo = repos[key];\n\n    var repoProjects = repo.Projects;\n\n    for (var j = 0; j &lt; repoProjects.Count; j++) {\n        var repoProject = repoProjects[j];\n        projects.push({\n            FilePath: repoProject.FilePath,\n            Name: repoProject.Name,\n            FileCount: repoProject.Files.Count,\n        });\n    }\n}\n\n\nConsoleWriteLine(ConvertJson(projects));\nConsoleWriteLine(\"It contained \" + projects.length + \" projects.\");\nExportJson(\"output.json\", projects);\n\n// end script\n</code></pre> <p>The script above will print the number of repositories and projects in the model. It will also export the projects to a json file. It uses the classes offered by the Honeydew plugin that are stored in the context. Using the helper functions from <code>DxWorks.ScriptBee.Plugin.Api.HelperFunctions</code>, we can easily convert the projects to json and export them to a file.</p> <p>If everything is ok, you should see the results in the console and the file outputs section.  </p>"},{"location":"scripts/first_python_script/","title":"Writing Your First Python Script","text":""},{"location":"scripts/first_python_script/#prerequisites","title":"Prerequisites","text":"<p>In order to write Python scripts, you need to have a Python Script Runner plugin installed. The examples uses ScriptBee Default Plugin Bundle</p>"},{"location":"scripts/first_python_script/#template","title":"Template","text":"<p>Only the code written between <code># start script</code> and <code># end script</code> will be executed</p> script.py<pre><code>project: Project\n\n# start script\n\nConsoleWriteLine(\"Hello, Python!\")\n\n# end script\n</code></pre>"},{"location":"scripts/first_python_script/#with-parameters","title":"With Parameters","text":"<p>ScriptBee supports parameterized scripts. This means that you can create add parameters while creating a script or edit them later.</p> <p>Make sure the script has the parameters defined before running it.</p> script.py<pre><code>project: Project\nscriptParameters: ScriptParameters\n\n# start script\n\nConsoleWriteLine(\"Hello, Python!\")\nConsoleWriteLine(\"Parameter: \" + scriptParameters.MyParameter)\n\n# end script\n</code></pre>"},{"location":"scripts/first_python_script/#model-uploading","title":"Model Uploading","text":"<p>From project details section, upload a model files for the specific loader. In this example, we will use Honeydew Loader.</p> <p>After the model file is uploaded, load your model by clicking the <code>Load Files</code> button.</p>"},{"location":"scripts/first_python_script/#script-execution","title":"Script Execution","text":"script.py<pre><code>project: Project\n\n# start script\n\nrepos = ContextGetValue(project.Context, \"Repository\", \"honeydew\")\n\nConsoleWriteLine(\"Repos: \" + str(repos.Count))\n\nprojects = []\n\nfor pair in repos:\n    repo = pair.Value\n    repoProjects = repo.Projects\n\n    for repoProject in repoProjects:\n        projects.append({\n            \"FilePath\": repoProject.FilePath,\n            \"Name\": repoProject.Name,\n            \"FileCount\": len(repoProject.Files),\n        })\n\nConsoleWriteLine(ConvertJson(projects))\nConsoleWriteLine(\"It contained \" + str(len(projects)) + \" projects.\")\nExportJson(\"output.json\", projects)\n\n# end script\n</code></pre> <p>The script above will print the number of repositories and projects in the model. It will also export the projects to a json file. It uses the classes offered by the Honeydew plugin that are stored in the context. Using the helper functions from <code>DxWorks.ScriptBee.Plugin.Api.HelperFunctions</code>, we can easily convert the projects to json and export them to a file.</p> <p>If everything is ok, you should see the results in the console and the file outputs section.  </p>"},{"location":"scripts/setup/","title":"Setup","text":"<p>ScriptBee has a default bundle that contains script generators and runners for C#, Python and Javascript.</p> <p>A new script can be created using the <code>New Script</code> button in the <code>Scripts</code> section.</p> <p>Writing the script is done by updating the file manually. ScriptBee offers a read-only view of the script.</p>"},{"location":"scripts/setup/#visual-studio-code","title":"Visual Studio Code","text":"<p>ScriptBee has a button that automatically opens the script in Visual Studio Code. Saving the modified script, will automatically update the preview.</p> <p>In order to work properly, the <code>UserFolder__UserFolderPath</code> environment variable must be set correctly.</p> <p>See User Folder Setup section for more information.</p>"},{"location":"scripts/setup/#code-generation","title":"Code Generation","text":"<p>ScriptBee will generate classes for the entities of the context. The generated code can be found in the <code>generated</code> folder, next to the <code>src</code> folder.</p>"}]}